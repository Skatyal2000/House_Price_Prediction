# -*- coding: utf-8 -*-
"""HousePricePred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/143Baaqg8s3QkH-CmoIm8JEFpSP0FU1pl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train_df = pd.read_csv('train.csv')
test_df = pd.read_csv('test.csv')

train_df.head(10)

train_df.shape

test_df.shape

train_df.isnull().sum()

sns.heatmap(train_df.isnull())

train_df.info()

test_df.info()

data = [train_df,test_df]

for dataset in data:
  dataset['LotFrontage'] = dataset['LotFrontage'].fillna(dataset['LotFrontage'].mean())

train_df.info()

train_df['BsmtFullBath']

train_df['GarageCars']

data = [train_df,test_df]

for dataset in data:
  dataset['MasVnrType'] = dataset['MasVnrType'].fillna(dataset['MasVnrType'].mode()[0])
  dataset['MasVnrArea'] = dataset['MasVnrArea'].fillna(dataset['MasVnrArea'].mean())
  dataset['BsmtQual'] = dataset['BsmtQual'].fillna(dataset['BsmtQual'].mode()[0])
  dataset['BsmtCond'] = dataset['BsmtCond'].fillna(dataset['BsmtCond'].mode()[0])
  dataset['BsmtExposure'] = dataset['BsmtExposure'].fillna(dataset['BsmtExposure'].mode()[0])
  dataset['BsmtFinType1'] = dataset['BsmtFinType1'].fillna(dataset['BsmtFinType1'].mode()[0])
  dataset['BsmtFinType2'] = dataset['BsmtFinType2'].fillna(dataset['BsmtFinType2'].mode()[0])
  dataset['Electrical'] = dataset['Electrical'].fillna(dataset['Electrical'].mode()[0])
  dataset['FireplaceQu'] = dataset['FireplaceQu'].fillna(dataset['FireplaceQu'].mode()[0])
  dataset['GarageType'] = dataset['GarageType'].fillna(dataset['GarageType'].mode()[0])
  dataset['GarageFinish'] = dataset['GarageFinish'].fillna(dataset['GarageFinish'].mode()[0])
  dataset['GarageQual'] = dataset['GarageQual'].fillna(dataset['GarageQual'].mode()[0])
  dataset['GarageCond'] = dataset['GarageCond'].fillna(dataset['GarageCond'].mode()[0])
  dataset['MSZoning'] = dataset['MSZoning'].fillna(dataset['MSZoning'].mode()[0])
  dataset['Utilities'] = dataset['Utilities'].fillna(dataset['Utilities'].mode()[0])
  dataset['Exterior1st'] = dataset['Exterior1st'].fillna(dataset['Exterior1st'].mode()[0])
  dataset['Exterior2nd'] = dataset['Exterior2nd'].fillna(dataset['Exterior2nd'].mode()[0])
  dataset['BsmtQual'] = dataset['BsmtQual'].fillna(dataset['BsmtQual'].mode()[0])
  dataset['BsmtFullBath'] = dataset['BsmtFullBath'].fillna(dataset['BsmtFullBath'].mode()[0])
  dataset['BsmtHalfBath'] = dataset['BsmtHalfBath'].fillna(dataset['BsmtHalfBath'].mode()[0])
  dataset['KitchenQual'] = dataset['KitchenQual'].fillna(dataset['KitchenQual'].mode()[0])
  dataset['Functional'] = dataset['Functional'].fillna(dataset['Functional'].mode()[0])
  dataset['GarageCars'] = dataset['GarageCars'].fillna(dataset['GarageCars'].mode()[0])
  dataset['SaleType'] = dataset['SaleType'].fillna(dataset['SaleType'].mode()[0])
  dataset['GarageYrBlt'] = dataset['GarageYrBlt'].fillna(dataset['GarageYrBlt'].mean())
  dataset['BsmtFinSF1'] = dataset['BsmtFinSF1'].fillna(dataset['BsmtFinSF1'].mean())
  dataset['BsmtFinSF2'] = dataset['BsmtFinSF2'].fillna(dataset['BsmtFinSF2'].mean())
  dataset['BsmtUnfSF'] = dataset['BsmtUnfSF'].fillna(dataset['BsmtUnfSF'].mean())
  dataset['TotalBsmtSF'] = dataset['TotalBsmtSF'].fillna(dataset['TotalBsmtSF'].mean())
  dataset['GarageArea'] = dataset['GarageArea'].fillna(dataset['GarageArea'].mean())

train_df.info()

test_df.info()

train_df = train_df.drop(['Alley','PoolQC','Fence','MiscFeature','Id'],axis=1)
test_df = test_df.drop(['Alley','PoolQC','Fence','MiscFeature','Id'],axis=1)

train_df.info()

test_df.info()

train_df.head()

train_df.shape

final_df = pd.concat([train_df,test_df],axis=0)
train_numerical_features = list(final_df.select_dtypes(include=['object']).columns)
train_numerical_features

for i in train_numerical_features:
    final_df = pd.concat([final_df,pd.get_dummies(final_df[i], prefix=i)],axis=1)
    final_df.drop(i, axis = 1, inplace=True)

final_df.info()

final_df['SalePrice']

final_df.shape

final_df =final_df.loc[:,~final_df.columns.duplicated()]

final_df.shape

train_df2 = final_df.iloc[:1460,:]
test_df2 = final_df.iloc[1460:,:]

train_df2['SalePrice']

test_df2['SalePrice']

test_df2.drop(['SalePrice'],axis=1)
test_df2

from sklearn.preprocessing import StandardScaler

X_train=train_df2.drop(['SalePrice'],axis=1)
y_train=train_df2['SalePrice']

ss_scaler = StandardScaler()
X_train = ss_scaler.fit_transform(X_train)

X_test = test_df2.copy()

X_test = ss_scaler.fit_transform(X_test)

X_test = pd.DataFrame(X_test)
X_train = pd.DataFrame(X_train)

#from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor

model_params = {
    'random_forest': {
        'model': RandomForestRegressor(),
        'params': {
            'n_estimators': [1,5,10,100],
            'criterion':['mse', 'mae']
        }
    },
  
    
    'SVR': {
        'model':SVR(),
        'params':{
            'kernel':['linear', 'poly', 'rbf', 'sigmoid'],
            'degree':[1,3,5],
            'gamma':['scale', 'auto']
        }
    },
    
    'XGBRegressor' : {
        'model': XGBRegressor(),
        'params':{
            'n_estimators' : [100, 500, 900, 1100, 1500],
            'booster': ['gbtree','gblinear'],
            'base_score':[0.25,0.5,0.75,1],
            'max_depth':[2, 3, 5, 10, 15],
            'learning_rate':[0.05,0.1,0.15,0.20],
            'min_child_weight':[1,2,3,4]
        }
    }
    
}

X_train

from sklearn.model_selection import GridSearchCV
scores = []

for model_name, mp in model_params.items():
    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)
    clf.fit(X_train, y_train)
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'best_params': clf.best_params_
    })
    
dfa = pd.DataFrame(scores,columns=['model','best_score','best_params'])
dfa

reg = XGBRegressor(base_score= 0.25, booster='gbtree', learning_rate=0.15, max_depth=3, min_child_weight=1)

reg.fit(X_train,y_train)

y_pred=reg.predict(test_df2.drop(['SalePrice'],axis=1))

y_pred

##Create Sample Submission file and Submit using ANN
pred=pd.DataFrame(y_pred)
sub_df=pd.read_csv('sample_submission.csv')
datasets=pd.concat([sub_df['Id'],pred],axis=1)
datasets.columns=['Id','SalePrice']
datasets.to_csv('sample_submission4.csv',index=False)

test_df2